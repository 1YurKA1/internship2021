//(1)
(function (){
    return 'anonymous'
})()
var Intern = function(name, age) {
    this.name = name;
    this.age = age;
    this.homework = {
        status: 'Resolved',
        rating: '100%'
    }
}

Intern.prototype.getHomework = function (){
    return this.name;
    return this.age;
    return this.homework;
}
//let obj;
//const obj = new Intern(name);
//let age;
//const obj = new Intern (age);
//let homework;
//const obj = new Intern (homework);

function gat(a, b=1) {
    return a * b;
}
console.log(gat(19, 29));

function gat(a, b=12) {
    return a * b;
}
    console.log(gat(23))


function lot(a,b=1 ) {
    return a + b;
    }
console.log(lot(1, 2));
setInterval(lot, 2000);

function successCallback(result) {
    console.log("file ready" + result);
}

function failureCallback(error) {
    console.error("Error" + error);
}

const users = [
    {
        name: 'Daniel',
        age: 22,
    },
    {
        name: 'Michael',
        age: 32,
    },
    {
        name: 'Vitalii',
        age: 24,
    }
];

function getUsers() {
    setTimeout(() => {
        users.forEach((user) => {
            console.log('user:', user);
        });
    }, 1000);
}

function createUser(user, user) {
    setTimeout(() => {
        users.push(user);
        console.log('user:', user);

    }, 2000);
}
getUsers();




//(2)
//const request = require('request');

//const getUsers = () => {
 //   return new Promise((resolve, reject) => {
 //       request('https://jsonplaceholder.typicode.com/users', (error, response, body);
  //          request('https://jsonplaceholder.typicode.com/todos/1', (error, response, body) => {
 //           if (error || response.statusCode !== 200) reject(error);
  //          resolve(JSON.parse(body));
  //      });
 //   });
//};

//getUsers()
//function loadJson(url) {
 //   return fetch(url)
 //       .then(response => {
  //          if (response.status == 200) {
 //               return response.json();
  //          } else {
 //               throw new Error(response.status);
 //           }
 //       });


    const promise1 = new Promise((resolve, reject) => {
        setTimeout(resolve, 500, 'one');
    });

    const promise2 = new Promise((resolve, reject) => {
        setTimeout(resolve, 100, 'two');
    });

    Promise.race([promise1, promise2]).then((value) => {
        console.log(value);
    });


const result = await Promise.any([
    Promise.resolve(2),
    new Promise(resolve => setTimeout(() => resolve(66), 1000)),
    Promise.reject(new Error('an error'))
]);

